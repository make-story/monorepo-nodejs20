/**
 * 루트 레이아웃(app/layout.tsx)은 기본적으로 서버 컴포넌트이며 클라이언트 컴포넌트로 설정할 수 없습니다.
 * (기존 Next.js pages 라우트 방식에서 루트 레이아웃은 _app.js 및 _document.js 파일을 대체)
 * https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#root-layout-required
 */
//import { Inter } from 'next/font/google'; // 방화벽 등으로 접근이 안될 수 있음
import type { Metadata, Viewport } from 'next';
import { PropsWithChildren, ReactNode } from 'react';
import { cookies } from 'next/headers';
import { getServerSession } from 'next-auth/next';

import './globals.css';
import { Providers } from '@/providers';
import { authOptions } from '@/auth';
import { initMocks } from '@/mocks/index';
import BaseLayout from '@/common/components/layouts/BaseLayout';

/*if (process.env.NEXT_PUBLIC_MOCK_APIS === 'enabled') {
  initMocks();
}*/

//const inter = Inter({ subsets: ['latin'] });

/**
 * metadata 등의 정보는 Server Component 모드에서만 설정 가능
 * ('use client' 선언이 있을 경우, metadata 등 서버렌더링 관련 설정간 에러 발생 가능성 있음)
 * 즉, layout.tsx 도 'use client' 선언할 수 있지만, metadata 등 서버사이드 설정 등을 고려해서 선언해야 함
 */
export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};
export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
};

// 컴포넌트 async/await 비동기는 서버컴포넌트에서만 지원 (클라이언트에서의 경우는 useEffect 로 감싸고 async/await 실행)
// https://stackoverflow.com/questions/77078222/error-async-await-is-not-yet-supported-in-client-components-in-next-js
export default async function RootLayout({
  children,
}: {
  children: ReactNode;
}) {
  //const cookieStore = cookies();
  //const session = cookieStore.get('session');
  const session = await getServerSession(authOptions);

  return (
    <html lang='ko'>
      {/* body 에 다크모드가 적용되어 있을 경우, 서버 렌더링의 경우 다크모드 결과 값을 알 수 없고, 클라이언트 렌더링에서 다크모드 값이 적용되기 때문에, 서버렌더링과 클리아언트 렌더링 결과가 다르기 때문에 경고가 발생! */}
      {/* 이를 해결하고자 suppressHydrationWarning 속성값 설정 */}
      <body suppressHydrationWarning={true}>
        {/* Provider */}
        {/* https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#using-context-providers */}
        <Providers session={session}>
          {/* layout.tsx 는 metadata 등 서버사이드 세팅이 필요한 정보가 있으므로, 'use client' 선언이 어려움. */}
          {/* 이에 BaseLayout 은 'use client' 선언에 무리없는 page.tsx 에서 구성하는 것이 좋다. */}
          {/* 합성컴포넌트(BaseLayout.Header />) 방식을 서버사이드 렌더링('use client' 선언없는 곳)에 구성하면, 'Error: Unsupported Server Component type: undefined' 에러 발생 */}
          {children}
        </Providers>
      </body>
    </html>
  );
}
